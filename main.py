import os
import asyncio
import re
import nest_asyncio
import time
from datetime import datetime, timedelta
from aiohttp import web
from telegram import Update, ChatPermissions
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

nest_asyncio.apply()

ADMIN_CHAT_ID = 296920330  # –¢–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–ª–Ω—ã—Ö –∏–º—ë–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "first_name | last_name"
BANNED_FULL_NAMES = [
    "–ê–ª–µ–∫—Å–µ–π | –ë–∏–∑–Ω–µ—Å –Ω–∞ –∞–≤—Ç–æ–º–æ–π–∫–∞—Ö",
    "–°–¥–µ–ª–∞–ª–∞ –º—É–∂—É x2",
    "–ê–ª–∏–Ω–∞ –ê–ì–ï–ù–¢ HUNTME üí∏",
    "–§—Ä–µ–π–¥ | –£–ª—ã–±–∞–µ–º—Å—è –∏ –ø–ª–∞—á–µ–º: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø–æ —Ñ—Ä–µ–π–¥—É",
    "Ôªø–ê–ª–µ–∫—Å–µ–π | –î–µ–Ω—å–≥–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å",
    "–ü–∞–≤–µ–ª ‚óè –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –±–µ–∑ –ø–∞–Ω–∏–∫–∏",
    "–ò–º—è3 | –ï—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "–ò–º—è3 | –ï—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
]

def get_tyumen_time():
    # –¢—é–º–µ–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+5)
    return (datetime.utcnow() + timedelta(hours=5)).strftime('%Y-%m-%d %H:%M:%S')

def get_chat_link(chat):
    if chat.username:
        return f"https://t.me/{chat.username}"
    elif chat.title:
        return f"https://t.me/{chat.title.replace(' ', '')}"
    else:
        return f"Chat ID: {chat.id}"

def normalize_text(text: str) -> str:
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
    mapping = {
        'a': '–∞',
        'c': '—Å',
        'e': '–µ',
        'o': '–æ',
        'p': '—Ä',
        'y': '—É',
        'x': '—Ö'
    }
    text = text.lower()
    return ''.join(mapping.get(ch, ch) for ch in text)

async def send_admin_notification(bot, text: str) -> None:
    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    except Exception as e:
        print("Error sending admin notification:", e)

# –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
SPAM_WORDS = []      
SPAM_PHRASES = []    

PERMANENT_BLOCK_PHRASES = [
    "—Ö–≤–∞—Ç–∏—Ç –∂–∏—Ç—å –Ω–∞ –º–µ–ª–∏!",
    "–Ω–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å",
    "—Ö–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥!",
    "–¥–∞–≤–∞–π –∑–∞—Ä–∞–±–æ—Ç–∞–µ–º",
    "–æ—Ç 8000—Ä –≤ –¥–µ–Ω—å",
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
    "–æ—Ç 9000—Ä –≤ –¥–µ–Ω—å",
    "–æ—Ç 10000—Ä –≤ –¥–µ–Ω—å",
    "–æ—Ç 11000—Ä –≤ –¥–µ–Ω—å",
    "–æ—Ç 12000—Ä –≤ –¥–µ–Ω—å",
    "–æ—Ç 13000—Ä –≤ –¥–µ–Ω—å",
    "–æ—Ç 14000—Ä –≤ –¥–µ–Ω—å",
    "–ø—Ä–∏–æ–±—Ä—ë–ª –ø–æ–ª–µ–∑–Ω—ã–µ –∫—É—Ä—Å—ã",
    "–∫—É—Ä—Å—ã –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ",
    "–∫—É—Ä—Å—ã –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
    "–¥–æ—á–∏—Ç—ã–≤–∞—é –∫–Ω–∏–≥—É",
    "—Å–æ—Ä–æ—Å",
    "PAWS",
    "–∫—É—Ä—Å—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
    "–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è"
]

COMBINED_BLOCKS = [
    ["—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"],
    ["—Ç—Ä–µ–π–¥–∏–Ω–≥", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"],
    ["—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
    ["—Ç—Ä–µ–π–¥–∏–Ω–≥", "—Ç–æ—Ä–≥–æ–≤–ª—è"]
]

async def restrict_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg and msg.new_chat_members:
        chat_link = get_chat_link(msg.chat)
        for member in msg.new_chat_members:
            until_date = int(time.time()) + 300  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 300 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            try:
                await context.bot.restrict_chat_member(
                    chat_id=msg.chat.id,
                    user_id=member.id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_media_messages=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False
                    ),
                    until_date=until_date
                )
                print(f"New member {member.id} restricted for 300 seconds in chat {msg.chat.id} ({chat_link}).")
            except Exception as e:
                print("Error restricting new member:", e)
        try:
            await context.bot.delete_message(
                chat_id=msg.chat.id,
                message_id=msg.message_id
            )
            print("Deleted join notification message.")
        except Exception as e:
            print("Error deleting join notification message:", e)

async def delete_left_member_notification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg and msg.left_chat_member:
        try:
            await context.bot.delete_message(
                chat_id=msg.chat.id,
                message_id=msg.message_id
            )
            print(f"Deleted left member notification in chat {msg.chat.id}.")
        except Exception as e:
            print("Error deleting left member notification:", e)

async def delete_spam_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message or update.channel_post
    if msg and msg.text:
        text = msg.text
        normalized_text = normalize_text(text)
        print("Received message:", normalized_text)
        permanent_ban = False
        user = msg.from_user

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "first_name | last_name"
        full_name = user.first_name if user.first_name else ""
        if user.last_name:
            full_name += " | " + user.last_name

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–∞–º (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π)
        if normalize_text(full_name) in [normalize_text(name) for name in BANNED_FULL_NAMES]:
            print(f"Banned full name detected: {full_name}")
            permanent_ban = True

        if not permanent_ban:
            for phrase in PERMANENT_BLOCK_PHRASES:
                if normalize_text(phrase) in normalized_text:
                    permanent_ban = True
                    break

        if not permanent_ban:
            for combo in COMBINED_BLOCKS:
                if all(normalize_text(word) in normalized_text for word in combo):
                    permanent_ban = True
                    break

        if not permanent_ban:
            for word in SPAM_WORDS:
                if re.search(r'\b' + re.escape(normalize_text(word)) + r'\b', normalized_text):
                    permanent_ban = True
                    break
            if not permanent_ban:
                for phrase in SPAM_PHRASES:
                    if normalize_text(phrase) in normalized_text:
                        permanent_ban = True
                        break

        if permanent_ban:
            chat_link = get_chat_link(msg.chat)
            block_time = get_tyumen_time()
            username = f"@{user.username}" if user.username else (user.first_name or str(user.id))
            notif = (f"–ù–∏–∫–Ω–µ–π–º: {username}\n"
                     f"–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_time}\n"
                     f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {chat_link}\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg.text}")
            print(notif)
            try:
                await context.bot.delete_message(
                    chat_id=msg.chat.id,
                    message_id=msg.message_id
                )
                print("Offending message deleted.")
            except Exception as e:
                print("Error deleting offending message:", e)
            try:
                await context.bot.ban_chat_member(
                    chat_id=msg.chat.id,
                    user_id=user.id
                )
                print("User banned permanently.")
            except Exception as e:
                print("Error banning user:", e)
            await send_admin_notification(context.bot, notif)

async def init_app():
    port = int(os.environ.get("PORT", 8443))
    TOKEN = os.environ.get("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    app_bot = ApplicationBuilder().token(TOKEN).build()
    app_bot.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, restrict_new_member))
    app_bot.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, delete_left_member_notification))
    app_bot.add_handler(MessageHandler(filters.ALL, delete_spam_message))
    await app_bot.initialize()
    webhook_url = "https://spampython-bot-py.onrender.com/webhook"
    await app_bot.bot.set_webhook(webhook_url)
    aio_app = web.Application()
    async def health(request):
        return web.Response(text="OK")
    aio_app.router.add_get("/", health)
    async def handle_webhook(request):
        data = await request.json()
        update = Update.de_json(data, app_bot.bot)
        await app_bot.process_update(update)
        return web.Response(text="OK")
    aio_app.router.add_post("/webhook", handle_webhook)
    return aio_app, port

async def main():
    aio_app, port = await init_app()
    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"Server running on port {port}")
    while True:
        await asyncio.sleep(3600)

if __name__ == '__main__':
    asyncio.run(main())
